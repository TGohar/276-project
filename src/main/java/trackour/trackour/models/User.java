package trackour.trackour.models;

// import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
// import java.util.stream.Collectors;

// import org.springframework.security.core.GrantedAuthority;
// import org.springframework.security.core.authority.SimpleGrantedAuthority;
// import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Entity
@Data
@Getter
@Setter
@Table(
    name="Users", 
    uniqueConstraints=
        @UniqueConstraint(
            columnNames={"uid", "username", "email"}
            )
        )
public class User {

    public User() {
        this.initRole();
    }

    public User(String username, String displayName, String password, String email, Set<Role> roles) {
        this.username = username;
        this.displayName = displayName;
        this.password = password;
        this.email = email;
    }

    public User(String username, String displayName, String password, String email) {
        this.username = username;
        this.displayName = displayName;
        this.password = password;
        this.email = email;
        this.initRole();
    }
    
    @Id
    /**
     * so they aren't visible when printed 
     * the id is not even generated by the client so
     * it's displayed as "null" and so it's a preference
     * to not allow that json property to be displayed
     */
    @JsonIgnore
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "uid")
    private Long uid;

    @Column(name = "username")
    private String username;

    @JsonIgnore
    @Column(name = "passwordResetToken")
    private String passwordResetToken;
    
    private String displayName;

    // so they aren't visible when printed
    @JsonIgnore
    private String password;

    @Column(name = "email")
    private String email;

    /**
     * Create a one-to-many relationship of {@link User} entity to {@link Role}
     * called "user_roles". This table stores only a foreign key representing the user uid
     * and a role. Users can have an indefinite number of roles and so there can be an
     * indefinite number of the same uid in this table but each 
     * representing a different role for that particular user
     */
    @Enumerated(EnumType.STRING)
    @ElementCollection(fetch = FetchType.EAGER)
    private Set<Role> roles;

    private void initRole() {
        // initialize default role as ["USER"]
        Set<Role> defaultRole = new HashSet<>();
        defaultRole.add(Role.USER);
        // test.add(Role.ADMIN);
        setRoles(defaultRole);
    }
}
